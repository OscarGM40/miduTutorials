/*
üëâ : moves the memory pointer to the next cell

üëà : moves the memory pointer to the previous cell

üëÜ : increment the memory cell at the current position

üëá : decreases the memory cell at the current position

ü§ú : if the memory cell at the current position is 0, jump just after the corresponding ü§õ

ü§õ : if the memory cell at the current position is not 0, jump just after the corresponding ü§ú

üëä : Display the current character represented by the ASCII code defined by the current position.
*/

/* constantes */
const MIN_CELL = 0
const MAX_CELL = 255

const clamp = (value) => {
  if (value > MAX_CELL) return MIN_CELL
  if (value < MIN_CELL) return MAX_CELL
  return value // si no entra a los ifs simplemente devuelvo el value
}

const getNextFistIndex = (index, instructions) => {
  /* minimo habr√© encontrado uno */
  let fists = 1
  for(let i = index + 1;i < instructions.length;i++) {
    if (instructions[i] === 'ü§ú') fists++
    if (instructions[i] === 'ü§õ') fists--
    if (fists === 0) return i
  }
}
const getPrevFistIndex = (index, instructions) => {
  /* minimo habr√© encontrado uno */
  let fists = 1
  for(let i = index - 1;i >= 0;i--) {
    if (instructions[i] === 'ü§õ') fists++
    if (instructions[i] === 'ü§ú') fists--
    if (fists === 0) return i
  }
}


function translate(string) {
  const memory = [0] // array que nos servir√° de memoria

  let pointer = 0 // puntero de la memoria o puntero del array
  let index = 0
  let output = ''

  const arrayOfInstructions = Array.from(string.split(' ').join(''))

  const actions = {
    'üëâ': () => {
      pointer++
      memory[pointer] ??= 0 // si no existiera esa posicion en el arreglo la inicializo a 0,
    },
    'üëà': () => {
      pointer--
      memory[pointer] ??= 0 // este ??= 0 en teoria pudiera sobrar ya que el puntero va hacia adelante y la habr√° creado al retroceder siempre ir√© a una pos con un valor
    },
    'üëÜ': () => {
      memory[pointer] = clamp(memory[pointer] + 1)
    },
    'üëá': () => {
      memory[pointer] = clamp(memory[pointer] - 1)
    },
    'ü§ú': () => {
      if (memory[pointer] === 0) {
        // index = arrayOfInstructions.indexOf('ü§õ', index)
        index = getNextFistIndex(index, arrayOfInstructions)
      }
    },
    'ü§õ': () => {
      if (memory[pointer] !== 0) {
        // index = arrayOfInstructions.lastIndexOf('ü§ú', index)
        index = getPrevFistIndex(index, arrayOfInstructions)
      }
    },
    'üëä': () => {
      output += String.fromCharCode(memory[pointer])
    }
  }

  while (index < arrayOfInstructions.length) {
    /* itero por cada action del arreglo de instrucciones  */
    const action = arrayOfInstructions[index]
    /* ejecuto el m√©todo en esa posici√≥n */
    actions[action]()

    console.log({ action, index, pointer, output })
    /* recuerda incrementar */
    index++
  }

  return output
}

 console.log(translate(
  'üëáü§úüëáüëáüëáüëáüëáüëáüëáüëâüëÜüëàü§õüëâüëáüëäüëáü§úüëáüëâüëÜüëÜüëÜüëÜüëÜüëàü§õüëâüëÜüëÜüëäüëÜüëÜüëÜüëÜüëÜüëÜüëÜüëäüëäüëÜüëÜüëÜüëä'
)) 
console.log(
  translate(
    'üëâüëÜüëÜüëÜüëÜüëÜüëÜüëÜüëÜü§úüëáüëàüëÜüëÜüëÜüëÜüëÜüëÜüëÜüëÜüëÜüëâü§õüëàüëäüëâüëâüëÜüëâüëáü§úüëÜü§õüëÜüëÜüëâüëÜüëÜüëâüëÜüëÜüëÜü§úüëâü§úüëáüëâüëÜüëÜüëÜüëàüëàüëÜüëÜüëÜüëâü§õüëàüëàü§õüëâüëáüëáüëáüëáüëáüëäüëâüëáüëâüëÜüëÜüëÜüëäüëäüëÜüëÜüëÜüëäüëâüëáüëäüëàüëàüëÜü§úüëâü§úüëÜüëâüëÜü§õüëâüëâü§õüëàüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëáüëäüëâüëâüëäüëÜüëÜüëÜüëäüëáüëáüëáüëáüëáüëáüëäüëáüëáüëáüëáüëáüëáüëáüëáüëäüëâüëÜüëäüëâüëÜüëä'
  )
)
module.exports = translate
